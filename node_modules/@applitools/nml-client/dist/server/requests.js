"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNMLRequests = void 0;
const req_broker_1 = require("./req-broker");
const req_1 = __importDefault(require("@applitools/req"));
const utils = __importStar(require("@applitools/utils"));
function makeNMLRequests({ settings, logger: mainLogger, }) {
    let brokerUrl = settings.brokerUrl;
    const req = (0, req_broker_1.makeReqBroker)({ settings, logger: mainLogger });
    const getSupportedEnvironmentsWithCache = utils.general.cachify(getSupportedEnvironments, () => 'default');
    return {
        getSupportedEnvironments: getSupportedEnvironmentsWithCache,
        takeScreenshots,
        takeSnapshots,
    };
    async function getSupportedEnvironments({ logger: _logger }) {
        const response = await (0, req_1.default)(settings.supportedEnvironmentsUrl);
        const result = await response.json();
        return result;
    }
    async function takeScreenshots({ settings, logger = mainLogger, }) {
        logger = logger.extend(mainLogger, { tags: [`nml-request-${utils.general.shortid()}`] });
        logger.log('Request "takeScreenshots" called with settings', settings);
        const supportedEnvironments = await getSupportedEnvironmentsWithCache({ logger });
        const { localEnvironment, renderEnvironments, environmentSettings } = settings.environments.reduce((result, environment) => {
            var _a;
            if (!utils.types.has(environment, 'iosDeviceInfo') && !utils.types.has(environment, 'androidDeviceInfo')) {
                result.localEnvironment = { ...environment, environmentId: utils.general.guid() };
            }
            else {
                const deviceInfo = utils.types.has(environment, 'iosDeviceInfo')
                    ? environment.iosDeviceInfo
                    : environment.androidDeviceInfo;
                const orientation = deviceInfo.screenOrientation === 'landscape' ? 'landscapeLeft' : (_a = deviceInfo.screenOrientation) !== null && _a !== void 0 ? _a : 'portrait';
                const rawEnvironment = supportedEnvironments[deviceInfo.deviceName][orientation].env;
                result.renderEnvironments.push({
                    requested: environment,
                    environmentId: utils.general.guid(),
                    deviceName: rawEnvironment.deviceInfo,
                    os: rawEnvironment.os + (deviceInfo.version ? ` ${deviceInfo.version}` : ''),
                    viewportSize: rawEnvironment.displaySize,
                });
                result.environmentSettings.push({ ...supportedEnvironments[deviceInfo.deviceName], orientation });
            }
            return result;
        }, {
            localEnvironment: undefined,
            renderEnvironments: [],
            environmentSettings: [],
        });
        try {
            const response = await req(brokerUrl, {
                name: 'TAKE_SCREENSHOT',
                body: {
                    protocolVersion: '1.0',
                    name: 'TAKE_SCREENSHOT',
                    key: utils.general.guid(),
                    payload: {
                        ...settings,
                        environments: undefined,
                        deviceList: !localEnvironment ? environmentSettings : undefined,
                    },
                },
                logger,
            });
            const result = await response.json();
            brokerUrl = result.nextPath;
            const screenshots = localEnvironment
                ? [{ image: result.payload.result.screenshotUrl, environment: localEnvironment }]
                : renderEnvironments.map((environment, index) => {
                    return { image: result.payload[index].result.screenshotUrl, environment };
                });
            logger.log('Request "takeScreenshots" finished successfully with body', screenshots);
            return screenshots;
        }
        catch (error) {
            if (error.nextPath)
                brokerUrl = error.nextPath;
            throw error;
        }
    }
    async function takeSnapshots({ settings, logger = mainLogger, }) {
        try {
            const response = await req(brokerUrl, {
                name: 'TAKE_SNAPSHOT',
                body: {
                    protocolVersion: '1.0',
                    name: 'TAKE_SNAPSHOT',
                    key: utils.general.guid(),
                    payload: {
                        waitBeforeCapture: settings.waitBeforeCapture,
                    },
                },
                logger,
            });
            const result = await response.json();
            brokerUrl = result.nextPath;
            const platformName = result.payload.result.resourceMap.metadata.platformName;
            const snapshot = { platformName, vhsHash: result.payload.result.resourceMap.vhs };
            if (platformName === 'ios') {
                ;
                snapshot.vhsCompatibilityParams = {
                    UIKitLinkTimeVersionNumber: result.payload.result.metadata.UIKitLinkTimeVersionNumber,
                    UIKitRunTimeVersionNumber: result.payload.result.metadata.UIKitRunTimeVersionNumber,
                };
            }
            else if (platformName === 'android') {
                ;
                snapshot.vhsType = 'android-x';
            }
            return Array(settings.environments.length).fill(snapshot);
        }
        catch (error) {
            if (error.nextPath)
                brokerUrl = error.nextPath;
            throw error;
        }
    }
}
exports.makeNMLRequests = makeNMLRequests;
