"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCheck = void 0;
const driver_1 = require("@applitools/driver");
const take_dom_snapshots_1 = require("./utils/take-dom-snapshots");
const to_base_check_settings_1 = require("../automation/utils/to-base-check-settings");
const uniquify_environments_1 = require("../automation/utils/uniquify-environments");
const to_environment_key_1 = require("../automation/utils/to-environment-key");
const abort_error_1 = require("../errors/abort-error");
const utils = __importStar(require("@applitools/utils"));
const lang = __importStar(require("../lang"));
const chalk_1 = __importDefault(require("chalk"));
function makeCheck({ eyes, target: defaultTarget, environments: defaultEnvironments = [], spec, signal, logger: mainLogger, }) {
    return async function check({ target = defaultTarget, settings = {}, logger = mainLogger, } = {}) {
        var _a, _b, _c;
        logger = logger.extend(mainLogger);
        logger.log('Command "check" is called with settings', settings);
        if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
            logger.warn('Command "check" was called after test was already aborted');
            throw new abort_error_1.AbortError('Command "check" was called after test was already aborted');
        }
        const { elementReferencesToCalculate, elementReferenceToTarget, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({
            settings,
        });
        const uniqueEnvironments = (0, uniquify_environments_1.uniquifyEnvironments)((_a = settings.environments) !== null && _a !== void 0 ? _a : defaultEnvironments);
        const ufgClient = await eyes.core.getUFGClient({
            settings: {
                ...eyes.test.ufgServer,
                eyesServerUrl: eyes.test.eyesServer.eyesServerUrl,
                apiKey: eyes.test.eyesServer.apiKey,
            },
            logger,
        });
        let snapshotResults;
        let snapshotUrl;
        let snapshotTitle;
        let userAgent;
        const driver = spec && (0, driver_1.isDriver)(target, spec)
            ? await (0, driver_1.makeDriver)({ spec, driver: target, reset: target === defaultTarget, logger })
            : null;
        if (driver) {
            const environment = await driver.getEnvironment();
            const currentContext = driver.currentContext;
            await currentContext.setScrollingElement((_b = settings.scrollRootElement) !== null && _b !== void 0 ? _b : null);
            if (environment.isWeb) {
                userAgent = await driver.getUserAgentLegacy();
                snapshotResults = await (0, take_dom_snapshots_1.takeDomSnapshots)({
                    driver,
                    settings: {
                        ...eyes.test.eyesServer,
                        waitBeforeCapture: settings.waitBeforeCapture,
                        disableBrowserFetching: settings.disableBrowserFetching,
                        layoutBreakpoints: settings.layoutBreakpoints,
                        environments: uniqueEnvironments,
                        skipResources: ufgClient.getCachedResourceUrls(),
                        lazyLoad: settings.lazyLoad,
                        calculateRegionsOptions: {
                            elementReferencesToCalculate,
                            elementReferenceToTarget,
                            scrollRootElement: settings.scrollRootElement,
                        },
                    },
                    provides: {
                        getChromeEmulationDevices: ufgClient.getChromeEmulationDevices,
                        getIOSDevices: ufgClient.getIOSDevices,
                    },
                    logger,
                });
            }
            else {
                const nmlClient = await eyes.core.getNMLClient({
                    driver,
                    settings: { ...eyes.test.eyesServer, supportedEnvironmentsUrl: eyes.test.supportedEnvironmentsUrl },
                    logger,
                });
                const snapshots = (await nmlClient.takeSnapshots({
                    settings: {
                        ...eyes.test.eyesServer,
                        waitBeforeCapture: settings.waitBeforeCapture,
                        environments: uniqueEnvironments,
                    },
                    logger,
                }));
                snapshotResults = snapshots.map(snapshot => {
                    var _a, _b, _c, _d;
                    return ({
                        snapshot,
                        regionToTarget: (0, driver_1.isSelector)(elementReferenceToTarget)
                            ? (_b = (_a = spec === null || spec === void 0 ? void 0 : spec.toSimpleCommonSelector) === null || _a === void 0 ? void 0 : _a.call(spec, settings.scrollRootElement)) !== null && _b !== void 0 ? _b : undefined
                            : undefined,
                        scrollRootSelector: (0, driver_1.isSelector)(settings.scrollRootElement)
                            ? (_d = (_c = spec === null || spec === void 0 ? void 0 : spec.toSimpleCommonSelector) === null || _c === void 0 ? void 0 : _c.call(spec, settings.scrollRootElement)) !== null && _d !== void 0 ? _d : undefined
                            : undefined,
                    });
                });
            }
            await currentContext.focus();
            snapshotUrl = await driver.getUrl();
            snapshotTitle = await driver.getTitle();
        }
        else {
            snapshotResults = !utils.types.isArray(target) ? Array(uniqueEnvironments.length).fill(target) : target;
            snapshotUrl = utils.types.has((_c = snapshotResults[0]) === null || _c === void 0 ? void 0 : _c.snapshot, 'url') ? snapshotResults[0].snapshot.url : undefined;
        }
        const promises = uniqueEnvironments.map(async (environment, index) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const environmentLogger = logger.extend({ tags: [`environment-${utils.general.shortid()}`] });
            const ufgEnvironment = environment;
            if (utils.types.has(ufgEnvironment, 'name') && ufgEnvironment.name === 'edge') {
                environmentLogger.console.log(chalk_1.default.yellow(lang.edgeUfgEnvironmentDeprecatedWarning));
            }
            try {
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    environmentLogger.warn('Command "check" was aborted before rendering');
                    throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                }
                const { snapshot: snapshotFromResult, selectorsToCalculate: selectorsToCalculateFromSnapshot, regionToTarget, scrollRootSelector, } = snapshotResults[index];
                const { cookies, ...snapshot } = snapshotFromResult;
                const region = (_a = regionToTarget !== null && regionToTarget !== void 0 ? regionToTarget : elementReferenceToTarget) !== null && _a !== void 0 ? _a : settings.region;
                const selectorsToCalculate = selectorsToCalculateFromSnapshot !== null && selectorsToCalculateFromSnapshot !== void 0 ? selectorsToCalculateFromSnapshot : elementReferencesToCalculate.map(selector => ({
                    originalSelector: selector,
                    safeSelector: selector,
                }));
                if (utils.types.has(ufgEnvironment, 'iosDeviceInfo') || utils.types.has(ufgEnvironment, 'androidDeviceInfo')) {
                    ufgEnvironment.type = utils.types.has(snapshot, 'cdt') ? 'web' : 'native';
                }
                const renderTargetPromise = ufgClient.createRenderTarget({
                    snapshot,
                    settings: {
                        environment: ufgEnvironment,
                        cookies,
                        headers: {
                            Referer: snapshotUrl,
                            'User-Agent': userAgent,
                            ...settings.headers,
                        },
                        proxy: eyes.test.eyesServer.proxy,
                        autProxy: settings.autProxy,
                    },
                    logger: environmentLogger,
                });
                const baseEyes = await eyes.getBaseEyes({ settings: { environment }, logger: environmentLogger });
                try {
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        environmentLogger.warn('Command "check" was aborted before rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                    }
                    else if (!baseEyes.running) {
                        environmentLogger.warn(`Render on environment with id "${(_b = baseEyes.test.environment) === null || _b === void 0 ? void 0 : _b.environmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Render on environment with id "${(_c = baseEyes.test.environment) === null || _c === void 0 ? void 0 : _c.environmentId}" was aborted during one of the previous steps`);
                    }
                    const renderTarget = await renderTargetPromise;
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        environmentLogger.warn('Command "check" was aborted before rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                    }
                    else if (!baseEyes.running) {
                        environmentLogger.warn(`Render on environment with id "${(_d = baseEyes.test.environment) === null || _d === void 0 ? void 0 : _d.environmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Render on environment with id "${(_e = baseEyes.test.environment) === null || _e === void 0 ? void 0 : _e.environmentId}" was aborted during one of the previous steps`);
                    }
                    const { renderId, selectorRegions, ...baseTarget } = await ufgClient.render({
                        target: renderTarget,
                        settings: {
                            ...settings,
                            region,
                            scrollRootElement: scrollRootSelector,
                            selectorsToCalculate: selectorsToCalculate.flatMap(({ safeSelector }) => safeSelector !== null && safeSelector !== void 0 ? safeSelector : []),
                            includeFullPageSize: Boolean(settings.pageId),
                            environment: ufgEnvironment,
                            environmentId: baseEyes.test.environment.environmentId,
                            uploadUrl: baseEyes.test.uploadUrl,
                            stitchingServiceUrl: baseEyes.test.stitchingServiceUrl,
                        },
                        signal,
                        logger: environmentLogger,
                    });
                    let offset = 0;
                    const baseSettings = getBaseCheckSettings({
                        calculatedRegions: selectorsToCalculate.map(({ originalSelector, safeSelector }) => ({
                            selector: originalSelector !== null && originalSelector !== void 0 ? originalSelector : undefined,
                            regions: safeSelector ? selectorRegions[offset++] : [],
                        })),
                    });
                    baseSettings.renderId = renderId;
                    baseTarget.source = snapshotUrl;
                    baseTarget.name = snapshotTitle;
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        environmentLogger.warn('Command "check" was aborted after rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted after rendering');
                    }
                    else if (!baseEyes.running) {
                        environmentLogger.warn(`Render on environment with id "${(_f = baseEyes.test.environment) === null || _f === void 0 ? void 0 : _f.environmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Render on environment with id "${(_g = baseEyes.test.environment) === null || _g === void 0 ? void 0 : _g.environmentId}" was aborted during one of the previous steps`);
                    }
                    await baseEyes.check({
                        target: { ...baseTarget, isTransformed: true },
                        settings: baseSettings,
                        logger: environmentLogger,
                    });
                }
                catch (error) {
                    environmentLogger.error(`Render on environment with id "${(_h = baseEyes.test.environment) === null || _h === void 0 ? void 0 : _h.environmentId}" failed due to an error`, error);
                    if (baseEyes.running && !(signal === null || signal === void 0 ? void 0 : signal.aborted))
                        await baseEyes.abort({ logger: environmentLogger, settings: { reason: error } });
                }
            }
            catch (error) {
                environmentLogger.error(`Environment with id ${ufgEnvironment.environmentId} failed before rendering started due to an error`, error);
                error.info = { ...error.info, userTestId: eyes.test.userTestId, environment: ufgEnvironment };
                throw error;
            }
        });
        uniqueEnvironments.forEach((environment, index) => {
            const key = (0, to_environment_key_1.toEnvironmentKey)(environment);
            let item = eyes.storage.get(key);
            if (!item) {
                item = { eyes: utils.promises.makeControlledPromise(), jobs: [] };
                eyes.storage.set(key, item);
            }
            item.jobs.push(promises[index]);
        });
    };
}
exports.makeCheck = makeCheck;
