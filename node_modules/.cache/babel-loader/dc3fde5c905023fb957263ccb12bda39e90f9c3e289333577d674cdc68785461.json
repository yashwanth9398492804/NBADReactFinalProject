{"ast":null,"code":"import { releaseAllKeys } from '../keyboard/index.js';\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { setSelectionRange } from '../event/selection/setSelectionRange.js';\nasync function type(element, text, {\n  skipClick = this.config.skipClick,\n  skipAutoClose = this.config.skipAutoClose,\n  initialSelectionStart,\n  initialSelectionEnd\n} = {}) {\n  // TODO: properly type guard\n  // we use this workaround for now to prevent changing behavior\n  if (element.disabled) return;\n  if (!skipClick) {\n    await this.click(element);\n  }\n  if (initialSelectionStart !== undefined) {\n    setSelectionRange(element, initialSelectionStart, initialSelectionEnd !== null && initialSelectionEnd !== void 0 ? initialSelectionEnd : initialSelectionStart);\n  }\n  await this.keyboard(text);\n  if (!skipAutoClose) {\n    await releaseAllKeys(this);\n  }\n}\nexport { type };","map":{"version":3,"names":["releaseAllKeys","setSelectionRange","type","element","text","skipClick","config","skipAutoClose","initialSelectionStart","initialSelectionEnd","disabled","click","undefined","keyboard"],"sources":["C:/NBAD/Y1/node_modules/@testing-library/user-event/dist/esm/utility/type.js"],"sourcesContent":["import { releaseAllKeys } from '../keyboard/index.js';\nimport '../utils/click/isClickableInput.js';\nimport '../utils/dataTransfer/Clipboard.js';\nimport '../utils/edit/isEditable.js';\nimport '../utils/edit/maxLength.js';\nimport '@testing-library/dom/dist/helpers.js';\nimport '../utils/keyDef/readNextDescriptor.js';\nimport '../utils/misc/level.js';\nimport '../options.js';\nimport { setSelectionRange } from '../event/selection/setSelectionRange.js';\n\nasync function type(element, text, { skipClick = this.config.skipClick, skipAutoClose = this.config.skipAutoClose, initialSelectionStart, initialSelectionEnd } = {}) {\n    // TODO: properly type guard\n    // we use this workaround for now to prevent changing behavior\n    if (element.disabled) return;\n    if (!skipClick) {\n        await this.click(element);\n    }\n    if (initialSelectionStart !== undefined) {\n        setSelectionRange(element, initialSelectionStart, initialSelectionEnd !== null && initialSelectionEnd !== void 0 ? initialSelectionEnd : initialSelectionStart);\n    }\n    await this.keyboard(text);\n    if (!skipAutoClose) {\n        await releaseAllKeys(this);\n    }\n}\n\nexport { type };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sBAAsB;AACrD,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,OAAO,sCAAsC;AAC7C,OAAO,uCAAuC;AAC9C,OAAO,wBAAwB;AAC/B,OAAO,eAAe;AACtB,SAASC,iBAAiB,QAAQ,yCAAyC;AAE3E,eAAeC,IAAIA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAAEC,SAAS,GAAG,IAAI,CAACC,MAAM,CAACD,SAAS;EAAEE,aAAa,GAAG,IAAI,CAACD,MAAM,CAACC,aAAa;EAAEC,qBAAqB;EAAEC;AAAoB,CAAC,GAAG,CAAC,CAAC,EAAE;EAClK;EACA;EACA,IAAIN,OAAO,CAACO,QAAQ,EAAE;EACtB,IAAI,CAACL,SAAS,EAAE;IACZ,MAAM,IAAI,CAACM,KAAK,CAACR,OAAO,CAAC;EAC7B;EACA,IAAIK,qBAAqB,KAAKI,SAAS,EAAE;IACrCX,iBAAiB,CAACE,OAAO,EAAEK,qBAAqB,EAAEC,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,GAAGA,mBAAmB,GAAGD,qBAAqB,CAAC;EACnK;EACA,MAAM,IAAI,CAACK,QAAQ,CAACT,IAAI,CAAC;EACzB,IAAI,CAACG,aAAa,EAAE;IAChB,MAAMP,cAAc,CAAC,IAAI,CAAC;EAC9B;AACJ;AAEA,SAASE,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}