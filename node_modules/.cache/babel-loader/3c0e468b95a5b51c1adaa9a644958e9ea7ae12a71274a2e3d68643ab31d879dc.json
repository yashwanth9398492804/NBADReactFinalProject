{"ast":null,"code":"import { getWindow } from '../misc/getWindow.js';\nimport { readBlobText } from './Blob.js';\nimport { createDataTransfer, getBlobFromDataTransferItem } from './DataTransfer.js';\n\n// Clipboard is not available in jsdom\nfunction _define_property(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n// MDN lists string|Blob|Promise<Blob|string> as possible types in ClipboardItemData\n// lib.dom.d.ts lists only Promise<Blob|string>\n// https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/ClipboardItem#syntax\nfunction createClipboardItem(window, ...blobs) {\n  const dataMap = Object.fromEntries(blobs.map(b => [typeof b === 'string' ? 'text/plain' : b.type, Promise.resolve(b)]));\n  // use real ClipboardItem if available\n  /* istanbul ignore if */\n  if (typeof window.ClipboardItem !== 'undefined') {\n    return new window.ClipboardItem(dataMap);\n  }\n  return new class ClipboardItem {\n    get types() {\n      return Array.from(Object.keys(this.data));\n    }\n    async getType(type) {\n      const value = await this.data[type];\n      if (!value) {\n        throw new Error(`${type} is not one of the available MIME types on this item.`);\n      }\n      return value instanceof window.Blob ? value : new window.Blob([value], {\n        type\n      });\n    }\n    constructor(d) {\n      _define_property(this, \"data\", void 0);\n      this.data = d;\n    }\n  }(dataMap);\n}\nconst ClipboardStubControl = Symbol('Manage ClipboardSub');\nfunction createClipboardStub(window, control) {\n  return Object.assign(new class Clipboard extends window.EventTarget {\n    async read() {\n      return Array.from(this.items);\n    }\n    async readText() {\n      let text = '';\n      for (const item of this.items) {\n        const type = item.types.includes('text/plain') ? 'text/plain' : item.types.find(t => t.startsWith('text/'));\n        if (type) {\n          text += await item.getType(type).then(b => readBlobText(b, window.FileReader));\n        }\n      }\n      return text;\n    }\n    async write(data) {\n      this.items = data;\n    }\n    async writeText(text) {\n      this.items = [createClipboardItem(window, text)];\n    }\n    constructor(...args) {\n      super(...args);\n      _define_property(this, \"items\", []);\n    }\n  }(), {\n    [ClipboardStubControl]: control\n  });\n}\nfunction isClipboardStub(clipboard) {\n  return !!(clipboard === null || clipboard === void 0 ? void 0 : clipboard[ClipboardStubControl]);\n}\nfunction attachClipboardStubToView(window) {\n  if (isClipboardStub(window.navigator.clipboard)) {\n    return window.navigator.clipboard[ClipboardStubControl];\n  }\n  const realClipboard = Object.getOwnPropertyDescriptor(window.navigator, 'clipboard');\n  let stub;\n  const control = {\n    resetClipboardStub: () => {\n      stub = createClipboardStub(window, control);\n    },\n    detachClipboardStub: () => {\n      /* istanbul ignore if */if (realClipboard) {\n        Object.defineProperty(window.navigator, 'clipboard', realClipboard);\n      } else {\n        Object.defineProperty(window.navigator, 'clipboard', {\n          value: undefined,\n          configurable: true\n        });\n      }\n    }\n  };\n  stub = createClipboardStub(window, control);\n  Object.defineProperty(window.navigator, 'clipboard', {\n    get: () => stub,\n    configurable: true\n  });\n  return stub[ClipboardStubControl];\n}\nfunction resetClipboardStubOnView(window) {\n  if (isClipboardStub(window.navigator.clipboard)) {\n    window.navigator.clipboard[ClipboardStubControl].resetClipboardStub();\n  }\n}\nfunction detachClipboardStubFromView(window) {\n  if (isClipboardStub(window.navigator.clipboard)) {\n    window.navigator.clipboard[ClipboardStubControl].detachClipboardStub();\n  }\n}\nasync function readDataTransferFromClipboard(document) {\n  const window = document.defaultView;\n  const clipboard = window === null || window === void 0 ? void 0 : window.navigator.clipboard;\n  const items = clipboard && (await clipboard.read());\n  if (!items) {\n    throw new Error('The Clipboard API is unavailable.');\n  }\n  const dt = createDataTransfer(window);\n  for (const item of items) {\n    for (const type of item.types) {\n      dt.setData(type, await item.getType(type).then(b => readBlobText(b, window.FileReader)));\n    }\n  }\n  return dt;\n}\nasync function writeDataTransferToClipboard(document, clipboardData) {\n  const window = getWindow(document);\n  const clipboard = window.navigator.clipboard;\n  const items = [];\n  for (let i = 0; i < clipboardData.items.length; i++) {\n    const dtItem = clipboardData.items[i];\n    const blob = getBlobFromDataTransferItem(window, dtItem);\n    items.push(createClipboardItem(window, blob));\n  }\n  const written = clipboard && (await clipboard.write(items).then(() => true,\n  // Can happen with other implementations that e.g. require permissions\n  /* istanbul ignore next */\n  () => false));\n  if (!written) {\n    throw new Error('The Clipboard API is unavailable.');\n  }\n}\nconst g = globalThis;\n/* istanbul ignore else */\nif (typeof g.afterEach === 'function') {\n  g.afterEach(() => resetClipboardStubOnView(globalThis.window));\n}\n/* istanbul ignore else */\nif (typeof g.afterAll === 'function') {\n  g.afterAll(() => detachClipboardStubFromView(globalThis.window));\n}\nexport { attachClipboardStubToView, createClipboardItem, detachClipboardStubFromView, readDataTransferFromClipboard, resetClipboardStubOnView, writeDataTransferToClipboard };","map":{"version":3,"names":["getWindow","readBlobText","createDataTransfer","getBlobFromDataTransferItem","_define_property","obj","key","value","Object","defineProperty","enumerable","configurable","writable","createClipboardItem","window","blobs","dataMap","fromEntries","map","b","type","Promise","resolve","ClipboardItem","types","Array","from","keys","data","getType","Error","Blob","constructor","d","ClipboardStubControl","Symbol","createClipboardStub","control","assign","Clipboard","EventTarget","read","items","readText","text","item","includes","find","t","startsWith","then","FileReader","write","writeText","args","isClipboardStub","clipboard","attachClipboardStubToView","navigator","realClipboard","getOwnPropertyDescriptor","stub","resetClipboardStub","detachClipboardStub","undefined","get","resetClipboardStubOnView","detachClipboardStubFromView","readDataTransferFromClipboard","document","defaultView","dt","setData","writeDataTransferToClipboard","clipboardData","i","length","dtItem","blob","push","written","g","globalThis","afterEach","afterAll"],"sources":["C:/NBAD/Y1/node_modules/@testing-library/user-event/dist/esm/utils/dataTransfer/Clipboard.js"],"sourcesContent":["import { getWindow } from '../misc/getWindow.js';\nimport { readBlobText } from './Blob.js';\nimport { createDataTransfer, getBlobFromDataTransferItem } from './DataTransfer.js';\n\n// Clipboard is not available in jsdom\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n// MDN lists string|Blob|Promise<Blob|string> as possible types in ClipboardItemData\n// lib.dom.d.ts lists only Promise<Blob|string>\n// https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/ClipboardItem#syntax\nfunction createClipboardItem(window, ...blobs) {\n    const dataMap = Object.fromEntries(blobs.map((b)=>[\n            typeof b === 'string' ? 'text/plain' : b.type,\n            Promise.resolve(b)\n        ]));\n    // use real ClipboardItem if available\n    /* istanbul ignore if */ if (typeof window.ClipboardItem !== 'undefined') {\n        return new window.ClipboardItem(dataMap);\n    }\n    return new class ClipboardItem {\n        get types() {\n            return Array.from(Object.keys(this.data));\n        }\n        async getType(type) {\n            const value = await this.data[type];\n            if (!value) {\n                throw new Error(`${type} is not one of the available MIME types on this item.`);\n            }\n            return value instanceof window.Blob ? value : new window.Blob([\n                value\n            ], {\n                type\n            });\n        }\n        constructor(d){\n            _define_property(this, \"data\", void 0);\n            this.data = d;\n        }\n    }(dataMap);\n}\nconst ClipboardStubControl = Symbol('Manage ClipboardSub');\nfunction createClipboardStub(window, control) {\n    return Object.assign(new class Clipboard extends window.EventTarget {\n        async read() {\n            return Array.from(this.items);\n        }\n        async readText() {\n            let text = '';\n            for (const item of this.items){\n                const type = item.types.includes('text/plain') ? 'text/plain' : item.types.find((t)=>t.startsWith('text/'));\n                if (type) {\n                    text += await item.getType(type).then((b)=>readBlobText(b, window.FileReader));\n                }\n            }\n            return text;\n        }\n        async write(data) {\n            this.items = data;\n        }\n        async writeText(text) {\n            this.items = [\n                createClipboardItem(window, text)\n            ];\n        }\n        constructor(...args){\n            super(...args);\n            _define_property(this, \"items\", []);\n        }\n    }(), {\n        [ClipboardStubControl]: control\n    });\n}\nfunction isClipboardStub(clipboard) {\n    return !!(clipboard === null || clipboard === void 0 ? void 0 : clipboard[ClipboardStubControl]);\n}\nfunction attachClipboardStubToView(window) {\n    if (isClipboardStub(window.navigator.clipboard)) {\n        return window.navigator.clipboard[ClipboardStubControl];\n    }\n    const realClipboard = Object.getOwnPropertyDescriptor(window.navigator, 'clipboard');\n    let stub;\n    const control = {\n        resetClipboardStub: ()=>{\n            stub = createClipboardStub(window, control);\n        },\n        detachClipboardStub: ()=>{\n            /* istanbul ignore if */ if (realClipboard) {\n                Object.defineProperty(window.navigator, 'clipboard', realClipboard);\n            } else {\n                Object.defineProperty(window.navigator, 'clipboard', {\n                    value: undefined,\n                    configurable: true\n                });\n            }\n        }\n    };\n    stub = createClipboardStub(window, control);\n    Object.defineProperty(window.navigator, 'clipboard', {\n        get: ()=>stub,\n        configurable: true\n    });\n    return stub[ClipboardStubControl];\n}\nfunction resetClipboardStubOnView(window) {\n    if (isClipboardStub(window.navigator.clipboard)) {\n        window.navigator.clipboard[ClipboardStubControl].resetClipboardStub();\n    }\n}\nfunction detachClipboardStubFromView(window) {\n    if (isClipboardStub(window.navigator.clipboard)) {\n        window.navigator.clipboard[ClipboardStubControl].detachClipboardStub();\n    }\n}\nasync function readDataTransferFromClipboard(document) {\n    const window = document.defaultView;\n    const clipboard = window === null || window === void 0 ? void 0 : window.navigator.clipboard;\n    const items = clipboard && await clipboard.read();\n    if (!items) {\n        throw new Error('The Clipboard API is unavailable.');\n    }\n    const dt = createDataTransfer(window);\n    for (const item of items){\n        for (const type of item.types){\n            dt.setData(type, await item.getType(type).then((b)=>readBlobText(b, window.FileReader)));\n        }\n    }\n    return dt;\n}\nasync function writeDataTransferToClipboard(document, clipboardData) {\n    const window = getWindow(document);\n    const clipboard = window.navigator.clipboard;\n    const items = [];\n    for(let i = 0; i < clipboardData.items.length; i++){\n        const dtItem = clipboardData.items[i];\n        const blob = getBlobFromDataTransferItem(window, dtItem);\n        items.push(createClipboardItem(window, blob));\n    }\n    const written = clipboard && await clipboard.write(items).then(()=>true, // Can happen with other implementations that e.g. require permissions\n    /* istanbul ignore next */ ()=>false);\n    if (!written) {\n        throw new Error('The Clipboard API is unavailable.');\n    }\n}\nconst g = globalThis;\n/* istanbul ignore else */ if (typeof g.afterEach === 'function') {\n    g.afterEach(()=>resetClipboardStubOnView(globalThis.window));\n}\n/* istanbul ignore else */ if (typeof g.afterAll === 'function') {\n    g.afterAll(()=>detachClipboardStubFromView(globalThis.window));\n}\n\nexport { attachClipboardStubToView, createClipboardItem, detachClipboardStubFromView, readDataTransferFromClipboard, resetClipboardStubOnView, writeDataTransferToClipboard };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}