{"ast":null,"code":"//authService.js\n\nimport axios from 'axios';\nimport config from '../../config';\nconst API_BASE_URL = config.apiUrl;\nconst authService = {\n  signup: async (fullName, username, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/register`, {\n        fullName,\n        username,\n        password\n      });\n\n      // Handle the response, e.g., check if registration was successful\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error during signup:', error);\n      throw error;\n    }\n  },\n  userLogin: async (username, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\n        username,\n        password\n      });\n\n      // Extract the tokens from the response\n      const {\n        token,\n        refreshToken\n      } = response.data;\n\n      // Save the tokens in localStorage or secure storage\n      localStorage.setItem('token', token);\n      localStorage.setItem('refreshToken', refreshToken);\n      return token;\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  },\n  refreshAccessToken: async () => {\n    try {\n      // Retrieve the refresh token from localStorage\n      let refreshToken = localStorage.getItem('refreshToken');\n\n      // If there's no refresh token in local storage, fetch it from the backend API\n      if (!refreshToken) {\n        const response = await axios.get(`${API_BASE_URL}/api/auth/refreshAccessToken`);\n        refreshToken = response.data.refreshToken;\n\n        // Save the fetched refresh token in local storage\n        localStorage.setItem('refreshToken', refreshToken);\n      }\n\n      // Make a request to refresh the access token using the backend API\n      const response = await axios.get(`${API_BASE_URL}/api/auth/refreshAccessToken`, {\n        refreshToken\n      });\n      console.log('response in refreshAccessToken', response);\n      // Extract the new access token from the response\n      const newToken = response.data.accessToken;\n\n      // Save the new token in localStorage\n      localStorage.setItem('token', newToken);\n      return newToken;\n    } catch (error) {\n      console.error('Error refreshing access token:', error);\n      throw error;\n    }\n  },\n  checkUserTokenExpiry: () => {\n    const expirationTime = Math.floor(Date.now() / 1000) + 50; // 50 seconds for testing, replace with actual logic\n    const currentTime = Date.now() / 1000; // Current time in seconds\n\n    return currentTime < expirationTime;\n  },\n  makeAuthenticatedRequest: async (url, options = {}) => {\n    try {\n      let token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token available');\n      }\n\n      // Check if the token is expired\n      const isTokenExpired = authService.checkUserTokenExpiry(token);\n      if (isTokenExpired) {\n        // Token is expired, try to refresh it\n        token = await authService.refreshAccessToken();\n\n        // If token refresh fails, throw an error\n        if (!token) {\n          throw new Error('Failed to refresh token');\n        }\n      }\n      const response = await axios(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Authenticated request error:', error);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","config","API_BASE_URL","apiUrl","authService","signup","fullName","username","password","response","post","console","log","data","error","userLogin","token","refreshToken","localStorage","setItem","refreshAccessToken","getItem","get","newToken","accessToken","checkUserTokenExpiry","expirationTime","Math","floor","Date","now","currentTime","makeAuthenticatedRequest","url","options","Error","isTokenExpired","headers","Authorization"],"sources":["C:/NBAD/Y1/src/components/services/authService.js"],"sourcesContent":["//authService.js\r\n\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\n\r\nconst API_BASE_URL = config.apiUrl;\r\n\r\nconst authService = {\r\n  signup: async (fullName, username, password) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/auth/register`, {\r\n        fullName,\r\n        username,\r\n        password,\r\n      });\r\n\r\n      // Handle the response, e.g., check if registration was successful\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      console.error('Error during signup:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  userLogin: async (username, password) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\r\n        username,\r\n        password,\r\n      });\r\n\r\n      // Extract the tokens from the response\r\n      const { token, refreshToken } = response.data;\r\n\r\n      // Save the tokens in localStorage or secure storage\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('refreshToken', refreshToken);\r\n\r\n      return token;\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  refreshAccessToken: async () => {\r\n    try {\r\n      // Retrieve the refresh token from localStorage\r\n      let refreshToken = localStorage.getItem('refreshToken');\r\n\r\n      // If there's no refresh token in local storage, fetch it from the backend API\r\n      if (!refreshToken) {\r\n        const response = await axios.get(`${API_BASE_URL}/api/auth/refreshAccessToken`);\r\n        refreshToken = response.data.refreshToken;\r\n\r\n        // Save the fetched refresh token in local storage\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n      }\r\n\r\n      // Make a request to refresh the access token using the backend API\r\n      const response = await axios.get(`${API_BASE_URL}/api/auth/refreshAccessToken`, {\r\n        refreshToken,\r\n      });\r\n      console.log('response in refreshAccessToken', response);\r\n      // Extract the new access token from the response\r\n      const newToken = response.data.accessToken;\r\n\r\n      // Save the new token in localStorage\r\n      localStorage.setItem('token', newToken);\r\n\r\n      return newToken;\r\n    } catch (error) {\r\n      console.error('Error refreshing access token:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  checkUserTokenExpiry: () => {\r\n    const expirationTime = Math.floor(Date.now() / 1000) + 50; // 50 seconds for testing, replace with actual logic\r\n    const currentTime = Date.now() / 1000; // Current time in seconds\r\n\r\n    return currentTime < expirationTime;\r\n  },\r\n\r\n  makeAuthenticatedRequest: async (url, options = {}) => {\r\n    try {\r\n      let token = localStorage.getItem('token');\r\n\r\n      if (!token) {\r\n        throw new Error('No token available');\r\n      }\r\n\r\n      // Check if the token is expired\r\n      const isTokenExpired = authService.checkUserTokenExpiry (token);\r\n\r\n      if (isTokenExpired) {\r\n        // Token is expired, try to refresh it\r\n        token = await authService.refreshAccessToken();\r\n\r\n        // If token refresh fails, throw an error\r\n        if (!token) {\r\n          throw new Error('Failed to refresh token');\r\n        }\r\n      }\r\n\r\n      const response = await axios(url, {\r\n        ...options,\r\n        headers: {\r\n          ...options.headers,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Authenticated request error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}