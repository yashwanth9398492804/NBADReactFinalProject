{"ast":null,"code":"import { Buttons } from './buttons.js';\nimport { Device } from './device.js';\nimport { Mouse } from './mouse.js';\nimport { Pointer } from './pointer.js';\nfunction _define_property(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nclass PointerHost {\n  isKeyPressed(keyDef) {\n    return this.devices.get(keyDef.pointerType).isPressed(keyDef);\n  }\n  async press(instance, keyDef, position) {\n    const pointerName = this.getPointerName(keyDef);\n    const pointer = keyDef.pointerType === 'touch' ? this.pointers.new(pointerName, keyDef).init(instance, position) : this.pointers.get(pointerName);\n    // TODO: deprecate the following implicit setting of position\n    pointer.position = position;\n    if (pointer.pointerType !== 'touch') {\n      this.mouse.position = position;\n    }\n    this.devices.get(keyDef.pointerType).addPressed(keyDef);\n    this.buttons.down(keyDef);\n    pointer.down(instance, keyDef);\n    if (pointer.pointerType !== 'touch' && !pointer.isPrevented) {\n      this.mouse.down(instance, keyDef, pointer);\n    }\n  }\n  async move(instance, pointerName, position) {\n    const pointer = this.pointers.get(pointerName);\n    // In (some?) browsers this order of events can be observed.\n    // This interweaving of events is probably unnecessary.\n    // While the order of mouse (or pointer) events is defined per spec,\n    // the order in which they interweave/follow on a user interaction depends on the implementation.\n    const pointermove = pointer.move(instance, position);\n    const mousemove = pointer.pointerType === 'touch' || pointer.isPrevented && pointer.isDown ? undefined : this.mouse.move(instance, position);\n    pointermove === null || pointermove === void 0 ? void 0 : pointermove.leave();\n    mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();\n    pointermove === null || pointermove === void 0 ? void 0 : pointermove.enter();\n    mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();\n    pointermove === null || pointermove === void 0 ? void 0 : pointermove.move();\n    mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();\n  }\n  async release(instance, keyDef, position) {\n    const device = this.devices.get(keyDef.pointerType);\n    device.removePressed(keyDef);\n    this.buttons.up(keyDef);\n    const pointer = this.pointers.get(this.getPointerName(keyDef));\n    // TODO: deprecate the following implicit setting of position\n    pointer.position = position;\n    if (pointer.pointerType !== 'touch') {\n      this.mouse.position = position;\n    }\n    if (device.countPressed === 0) {\n      pointer.up(instance, keyDef);\n    }\n    if (pointer.pointerType === 'touch') {\n      pointer.release(instance);\n    }\n    if (!pointer.isPrevented) {\n      if (pointer.pointerType === 'touch' && !pointer.isMultitouch) {\n        const mousemove = this.mouse.move(instance, pointer.position);\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();\n        this.mouse.down(instance, keyDef, pointer);\n      }\n      if (!pointer.isMultitouch) {\n        const mousemove = this.mouse.move(instance, pointer.position);\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();\n        this.mouse.up(instance, keyDef, pointer);\n      }\n    }\n  }\n  getPointerName(keyDef) {\n    return keyDef.pointerType === 'touch' ? keyDef.name : keyDef.pointerType;\n  }\n  getPreviousPosition(pointerName) {\n    return this.pointers.has(pointerName) ? this.pointers.get(pointerName).position : undefined;\n  }\n  resetClickCount() {\n    this.mouse.resetClickCount();\n  }\n  getMouseTarget(instance) {\n    var _this_mouse_position_target;\n    return (_this_mouse_position_target = this.mouse.position.target) !== null && _this_mouse_position_target !== void 0 ? _this_mouse_position_target : instance.config.document.body;\n  }\n  setMousePosition(position) {\n    this.mouse.position = position;\n    this.pointers.get('mouse').position = position;\n  }\n  constructor(system) {\n    _define_property(this, \"system\", void 0);\n    _define_property(this, \"mouse\", void 0);\n    _define_property(this, \"buttons\", void 0);\n    _define_property(this, \"devices\", new class {\n      get(k) {\n        var\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          _this_registry, _k;\n        var _;\n        (_ = (_this_registry = this.registry)[_k = k]) !== null && _ !== void 0 ? _ : _this_registry[_k] = new Device();\n        return this.registry[k];\n      }\n      constructor() {\n        _define_property(this, \"registry\", {});\n      }\n    }());\n    _define_property(this, \"pointers\", new class {\n      new(pointerName, keyDef) {\n        const isPrimary = keyDef.pointerType !== 'touch' || !Object.values(this.registry).some(p => p.pointerType === 'touch' && !p.isCancelled);\n        if (!isPrimary) {\n          Object.values(this.registry).forEach(p => {\n            if (p.pointerType === keyDef.pointerType && !p.isCancelled) {\n              p.isMultitouch = true;\n            }\n          });\n        }\n        this.registry[pointerName] = new Pointer({\n          pointerId: this.nextId++,\n          pointerType: keyDef.pointerType,\n          isPrimary\n        });\n        return this.registry[pointerName];\n      }\n      get(pointerName) {\n        if (!this.has(pointerName)) {\n          throw new Error(`Trying to access pointer \"${pointerName}\" which does not exist.`);\n        }\n        return this.registry[pointerName];\n      }\n      has(pointerName) {\n        return pointerName in this.registry;\n      }\n      constructor() {\n        _define_property(this, \"registry\", {\n          mouse: new Pointer({\n            pointerId: 1,\n            pointerType: 'mouse',\n            isPrimary: true\n          })\n        });\n        _define_property(this, \"nextId\", 2);\n      }\n    }());\n    this.system = system;\n    this.buttons = new Buttons();\n    this.mouse = new Mouse();\n  }\n}\nexport { PointerHost };","map":{"version":3,"names":["Buttons","Device","Mouse","Pointer","_define_property","obj","key","value","Object","defineProperty","enumerable","configurable","writable","PointerHost","isKeyPressed","keyDef","devices","get","pointerType","isPressed","press","instance","position","pointerName","getPointerName","pointer","pointers","new","init","mouse","addPressed","buttons","down","isPrevented","move","pointermove","mousemove","isDown","undefined","leave","enter","release","device","removePressed","up","countPressed","isMultitouch","name","getPreviousPosition","has","resetClickCount","getMouseTarget","_this_mouse_position_target","target","config","document","body","setMousePosition","constructor","system","k","_this_registry","_k","_","registry","isPrimary","values","some","p","isCancelled","forEach","pointerId","nextId","Error"],"sources":["C:/NBAD/Y1/node_modules/@testing-library/user-event/dist/esm/system/pointer/index.js"],"sourcesContent":["import { Buttons } from './buttons.js';\nimport { Device } from './device.js';\nimport { Mouse } from './mouse.js';\nimport { Pointer } from './pointer.js';\n\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass PointerHost {\n    isKeyPressed(keyDef) {\n        return this.devices.get(keyDef.pointerType).isPressed(keyDef);\n    }\n    async press(instance, keyDef, position) {\n        const pointerName = this.getPointerName(keyDef);\n        const pointer = keyDef.pointerType === 'touch' ? this.pointers.new(pointerName, keyDef).init(instance, position) : this.pointers.get(pointerName);\n        // TODO: deprecate the following implicit setting of position\n        pointer.position = position;\n        if (pointer.pointerType !== 'touch') {\n            this.mouse.position = position;\n        }\n        this.devices.get(keyDef.pointerType).addPressed(keyDef);\n        this.buttons.down(keyDef);\n        pointer.down(instance, keyDef);\n        if (pointer.pointerType !== 'touch' && !pointer.isPrevented) {\n            this.mouse.down(instance, keyDef, pointer);\n        }\n    }\n    async move(instance, pointerName, position) {\n        const pointer = this.pointers.get(pointerName);\n        // In (some?) browsers this order of events can be observed.\n        // This interweaving of events is probably unnecessary.\n        // While the order of mouse (or pointer) events is defined per spec,\n        // the order in which they interweave/follow on a user interaction depends on the implementation.\n        const pointermove = pointer.move(instance, position);\n        const mousemove = pointer.pointerType === 'touch' || pointer.isPrevented && pointer.isDown ? undefined : this.mouse.move(instance, position);\n        pointermove === null || pointermove === void 0 ? void 0 : pointermove.leave();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();\n        pointermove === null || pointermove === void 0 ? void 0 : pointermove.enter();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();\n        pointermove === null || pointermove === void 0 ? void 0 : pointermove.move();\n        mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();\n    }\n    async release(instance, keyDef, position) {\n        const device = this.devices.get(keyDef.pointerType);\n        device.removePressed(keyDef);\n        this.buttons.up(keyDef);\n        const pointer = this.pointers.get(this.getPointerName(keyDef));\n        // TODO: deprecate the following implicit setting of position\n        pointer.position = position;\n        if (pointer.pointerType !== 'touch') {\n            this.mouse.position = position;\n        }\n        if (device.countPressed === 0) {\n            pointer.up(instance, keyDef);\n        }\n        if (pointer.pointerType === 'touch') {\n            pointer.release(instance);\n        }\n        if (!pointer.isPrevented) {\n            if (pointer.pointerType === 'touch' && !pointer.isMultitouch) {\n                const mousemove = this.mouse.move(instance, pointer.position);\n                mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();\n                mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();\n                mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();\n                this.mouse.down(instance, keyDef, pointer);\n            }\n            if (!pointer.isMultitouch) {\n                const mousemove = this.mouse.move(instance, pointer.position);\n                mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();\n                mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();\n                mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();\n                this.mouse.up(instance, keyDef, pointer);\n            }\n        }\n    }\n    getPointerName(keyDef) {\n        return keyDef.pointerType === 'touch' ? keyDef.name : keyDef.pointerType;\n    }\n    getPreviousPosition(pointerName) {\n        return this.pointers.has(pointerName) ? this.pointers.get(pointerName).position : undefined;\n    }\n    resetClickCount() {\n        this.mouse.resetClickCount();\n    }\n    getMouseTarget(instance) {\n        var _this_mouse_position_target;\n        return (_this_mouse_position_target = this.mouse.position.target) !== null && _this_mouse_position_target !== void 0 ? _this_mouse_position_target : instance.config.document.body;\n    }\n    setMousePosition(position) {\n        this.mouse.position = position;\n        this.pointers.get('mouse').position = position;\n    }\n    constructor(system){\n        _define_property(this, \"system\", void 0);\n        _define_property(this, \"mouse\", void 0);\n        _define_property(this, \"buttons\", void 0);\n        _define_property(this, \"devices\", new class {\n            get(k) {\n                var // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                _this_registry, _k;\n                var _;\n                (_ = (_this_registry = this.registry)[_k = k]) !== null && _ !== void 0 ? _ : _this_registry[_k] = new Device();\n                return this.registry[k];\n            }\n            constructor(){\n                _define_property(this, \"registry\", {});\n            }\n        }());\n        _define_property(this, \"pointers\", new class {\n            new(pointerName, keyDef) {\n                const isPrimary = keyDef.pointerType !== 'touch' || !Object.values(this.registry).some((p)=>p.pointerType === 'touch' && !p.isCancelled);\n                if (!isPrimary) {\n                    Object.values(this.registry).forEach((p)=>{\n                        if (p.pointerType === keyDef.pointerType && !p.isCancelled) {\n                            p.isMultitouch = true;\n                        }\n                    });\n                }\n                this.registry[pointerName] = new Pointer({\n                    pointerId: this.nextId++,\n                    pointerType: keyDef.pointerType,\n                    isPrimary\n                });\n                return this.registry[pointerName];\n            }\n            get(pointerName) {\n                if (!this.has(pointerName)) {\n                    throw new Error(`Trying to access pointer \"${pointerName}\" which does not exist.`);\n                }\n                return this.registry[pointerName];\n            }\n            has(pointerName) {\n                return pointerName in this.registry;\n            }\n            constructor(){\n                _define_property(this, \"registry\", {\n                    mouse: new Pointer({\n                        pointerId: 1,\n                        pointerType: 'mouse',\n                        isPrimary: true\n                    })\n                });\n                _define_property(this, \"nextId\", 2);\n            }\n        }());\n        this.system = system;\n        this.buttons = new Buttons();\n        this.mouse = new Mouse();\n    }\n}\n\nexport { PointerHost };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}