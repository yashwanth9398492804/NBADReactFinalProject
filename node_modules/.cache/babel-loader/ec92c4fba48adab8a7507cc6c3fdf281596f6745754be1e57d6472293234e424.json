{"ast":null,"code":"var _jsxFileName = \"C:\\\\NBAD\\\\Y1\\\\src\\\\components\\\\Auth\\\\UserRegistration.js\";\nimport React from 'react';\nimport { render, waitFor, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Signup from '../Signup';\nimport authService from '../../services/authService';\n\n// Mock the authService module\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\njest.mock('../../services/authService');\ndescribe('Signup Component', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n  test('renders signup form', () => {\n    render( /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this));\n    const signUpHeading = screen.getByRole('heading', {\n      name: 'Sign Up'\n    });\n    const signUpButton = screen.getByRole('button', {\n      name: 'Sign Up'\n    });\n    expect(signUpHeading).toBeInTheDocument();\n    expect(signUpButton).toBeInTheDocument();\n    expect(screen.getByLabelText('Full Name:')).toBeInTheDocument();\n    expect(screen.getByLabelText('Username:')).toBeInTheDocument();\n    expect(screen.getByLabelText('Password:')).toBeInTheDocument();\n  });\n  test('handles successful signup and displays success message', async () => {\n    authService.userRegistration.mockResolvedValue(); // Mock a successful registration\n    render( /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this));\n    userEvent.type(screen.getByLabelText('Full Name:'), 'John Doe');\n    userEvent.type(screen.getByLabelText('Username:'), 'john_doe');\n    userEvent.type(screen.getByLabelText('Password:'), 'password123');\n    userEvent.click(screen.getByRole('button', {\n      name: 'Sign Up'\n    }));\n    await waitFor(() => {\n      expect(screen.getByText('Signup successful!')).toBeInTheDocument();\n    });\n  });\n  test('handles signup failure and displays error message', async () => {\n    authService.userRegistration.mockRejectedValue(new Error('Registration failed')); // Mock a failed registration\n    render( /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this));\n    userEvent.type(screen.getByLabelText('Full Name:'), 'John Doe');\n    userEvent.type(screen.getByLabelText('Username:'), 'john_doe');\n    userEvent.type(screen.getByLabelText('Password:'), 'invalidpassword');\n    userEvent.click(screen.getByRole('button', {\n      name: 'Sign Up'\n    }));\n    await waitFor(() => {\n      expect(screen.getByText('User registration failed. Please try again.')).toBeInTheDocument();\n    });\n  });\n});","map":{"version":3,"names":["React","render","waitFor","screen","userEvent","Signup","authService","jsxDEV","_jsxDEV","jest","mock","describe","afterEach","clearAllMocks","test","fileName","_jsxFileName","lineNumber","columnNumber","signUpHeading","getByRole","name","signUpButton","expect","toBeInTheDocument","getByLabelText","userRegistration","mockResolvedValue","type","click","getByText","mockRejectedValue","Error"],"sources":["C:/NBAD/Y1/src/components/Auth/UserRegistration.js"],"sourcesContent":["import React from 'react';\r\nimport { render, waitFor, screen } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport Signup from '../Signup';\r\nimport authService from '../../services/authService';\r\n\r\n// Mock the authService module\r\njest.mock('../../services/authService');\r\n\r\ndescribe('Signup Component', () => {\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('renders signup form', () => {\r\n    render(<Signup />);\r\n    const signUpHeading = screen.getByRole('heading', { name: 'Sign Up' });\r\n    const signUpButton = screen.getByRole('button', { name: 'Sign Up' });\r\n\r\n    expect(signUpHeading).toBeInTheDocument();\r\n    expect(signUpButton).toBeInTheDocument();\r\n    expect(screen.getByLabelText('Full Name:')).toBeInTheDocument();\r\n    expect(screen.getByLabelText('Username:')).toBeInTheDocument();\r\n    expect(screen.getByLabelText('Password:')).toBeInTheDocument();\r\n  });\r\n\r\n  test('handles successful signup and displays success message', async () => {\r\n    authService.userRegistration.mockResolvedValue(); // Mock a successful registration\r\n    render(<Signup />);\r\n    \r\n    userEvent.type(screen.getByLabelText('Full Name:'), 'John Doe');\r\n    userEvent.type(screen.getByLabelText('Username:'), 'john_doe');\r\n    userEvent.type(screen.getByLabelText('Password:'), 'password123');\r\n    userEvent.click(screen.getByRole('button', { name: 'Sign Up' }));\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Signup successful!')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  test('handles signup failure and displays error message', async () => {\r\n    authService.userRegistration.mockRejectedValue(new Error('Registration failed')); // Mock a failed registration\r\n    render(<Signup />);\r\n    \r\n    userEvent.type(screen.getByLabelText('Full Name:'), 'John Doe');\r\n    userEvent.type(screen.getByLabelText('Username:'), 'john_doe');\r\n    userEvent.type(screen.getByLabelText('Password:'), 'invalidpassword');\r\n    userEvent.click(screen.getByRole('button', { name: 'Sign Up' }));\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('User registration failed. Please try again.')).toBeInTheDocument();\r\n    });\r\n  });\r\n});"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,OAAO,EAAEC,MAAM,QAAQ,wBAAwB;AAChE,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,WAAW,MAAM,4BAA4B;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,IAAI,CAACC,IAAI,CAAC,4BAA4B,CAAC;AAEvCC,QAAQ,CAAC,kBAAkB,EAAE,MAAM;EACjCC,SAAS,CAAC,MAAM;IACdH,IAAI,CAACI,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,IAAI,CAAC,qBAAqB,EAAE,MAAM;IAChCb,MAAM,eAACO,OAAA,CAACH,MAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAClB,MAAMC,aAAa,GAAGhB,MAAM,CAACiB,SAAS,CAAC,SAAS,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC;IACtE,MAAMC,YAAY,GAAGnB,MAAM,CAACiB,SAAS,CAAC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC;IAEpEE,MAAM,CAACJ,aAAa,CAAC,CAACK,iBAAiB,CAAC,CAAC;IACzCD,MAAM,CAACD,YAAY,CAAC,CAACE,iBAAiB,CAAC,CAAC;IACxCD,MAAM,CAACpB,MAAM,CAACsB,cAAc,CAAC,YAAY,CAAC,CAAC,CAACD,iBAAiB,CAAC,CAAC;IAC/DD,MAAM,CAACpB,MAAM,CAACsB,cAAc,CAAC,WAAW,CAAC,CAAC,CAACD,iBAAiB,CAAC,CAAC;IAC9DD,MAAM,CAACpB,MAAM,CAACsB,cAAc,CAAC,WAAW,CAAC,CAAC,CAACD,iBAAiB,CAAC,CAAC;EAChE,CAAC,CAAC;EAEFV,IAAI,CAAC,wDAAwD,EAAE,YAAY;IACzER,WAAW,CAACoB,gBAAgB,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAClD1B,MAAM,eAACO,OAAA,CAACH,MAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAElBd,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAACsB,cAAc,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC;IAC/DrB,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAACsB,cAAc,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC;IAC9DrB,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAACsB,cAAc,CAAC,WAAW,CAAC,EAAE,aAAa,CAAC;IACjErB,SAAS,CAACyB,KAAK,CAAC1B,MAAM,CAACiB,SAAS,CAAC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC,CAAC;IAEhE,MAAMnB,OAAO,CAAC,MAAM;MAClBqB,MAAM,CAACpB,MAAM,CAAC2B,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAACN,iBAAiB,CAAC,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFV,IAAI,CAAC,mDAAmD,EAAE,YAAY;IACpER,WAAW,CAACoB,gBAAgB,CAACK,iBAAiB,CAAC,IAAIC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAClF/B,MAAM,eAACO,OAAA,CAACH,MAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAElBd,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAACsB,cAAc,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC;IAC/DrB,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAACsB,cAAc,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC;IAC9DrB,SAAS,CAACwB,IAAI,CAACzB,MAAM,CAACsB,cAAc,CAAC,WAAW,CAAC,EAAE,iBAAiB,CAAC;IACrErB,SAAS,CAACyB,KAAK,CAAC1B,MAAM,CAACiB,SAAS,CAAC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC,CAAC;IAEhE,MAAMnB,OAAO,CAAC,MAAM;MAClBqB,MAAM,CAACpB,MAAM,CAAC2B,SAAS,CAAC,6CAA6C,CAAC,CAAC,CAACN,iBAAiB,CAAC,CAAC;IAC7F,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}