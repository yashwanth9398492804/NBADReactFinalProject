[{"C:\\NBAD\\Y1\\src\\index.js":"1","C:\\NBAD\\Y1\\src\\reportWebVitals.js":"2","C:\\NBAD\\Y1\\src\\App.js":"3","C:\\NBAD\\Y1\\src\\components\\Auth\\UserRegistration.js":"4","C:\\NBAD\\Y1\\src\\components\\Auth\\UserLogin.js":"5","C:\\NBAD\\Y1\\src\\components\\Dashboard\\UserDashboard.js":"6","C:\\NBAD\\Y1\\src\\components\\services\\authService.js":"7","C:\\NBAD\\Y1\\src\\config.js":"8","C:\\NBAD\\Y1\\src\\components\\Auth\\AuthenticationContext.js":"9","C:\\NBAD\\Y1\\src\\components\\Dashboard\\CreateBudget.js":"10","C:\\NBAD\\Y1\\src\\components\\Dashboard\\FinancialChart.js":"11","C:\\NBAD\\Y1\\src\\components\\Dashboard\\BudgetOverview.js":"12","C:\\NBAD\\Y1\\src\\components\\services\\apiService.js":"13","C:\\NBAD\\Y1\\src\\components\\Dashboard\\BudgetCapacityManager.js":"14","C:\\NBAD\\Y1\\src\\components\\Footer\\Footer.js":"15"},{"size":580,"mtime":1702103057177,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1702103057178,"results":"18","hashOfConfig":"17"},{"size":3545,"mtime":1702237575961,"results":"19","hashOfConfig":"17"},{"size":2389,"mtime":1702237015854,"results":"20","hashOfConfig":"17"},{"size":2431,"mtime":1702270051433,"results":"21","hashOfConfig":"17"},{"size":6650,"mtime":1702275824594,"results":"22","hashOfConfig":"17"},{"size":2803,"mtime":1702237564912,"results":"23","hashOfConfig":"17"},{"size":149,"mtime":1702103057176,"results":"24","hashOfConfig":"17"},{"size":2231,"mtime":1702236962732,"results":"25","hashOfConfig":"17"},{"size":2162,"mtime":1702303971881,"results":"26","hashOfConfig":"17"},{"size":10541,"mtime":1702237365891,"results":"27","hashOfConfig":"17"},{"size":4249,"mtime":1702237180587,"results":"28","hashOfConfig":"17"},{"size":519,"mtime":1702237518072,"results":"29","hashOfConfig":"17"},{"size":5227,"mtime":1702303960143,"results":"30","hashOfConfig":"17"},{"size":322,"mtime":1702148092138,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"nots4h",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"35"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"C:\\NBAD\\Y1\\src\\index.js",[],[],["82","83","84","85","86","87"],"C:\\NBAD\\Y1\\src\\reportWebVitals.js",[],[],"C:\\NBAD\\Y1\\src\\App.js",["88","89","90"],[],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes, Link, Navigate } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { UserAuthProvider } from './components/Auth/AuthenticationContext';\r\nimport UserLogin from './components/Auth/UserLogin';\r\nimport UserRegistration from './components/Auth/UserRegistration';\r\nimport UserDashboard from './components/Dashboard/UserDashboard';\r\nimport BudgetOverview from './components/Dashboard/BudgetOverview';\r\nimport FinancialChart from './components/Dashboard/FinancialChart';\r\nimport AddBudgetCapacity from './components/Dashboard/BudgetCapacityManager';\r\nimport CreateBudget from './components/Dashboard/CreateBudget';\r\nimport authService from './components/services/authService';\r\nimport './styles/style.css';\r\nimport Footer from './components/Footer/Footer';\r\n\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"text-container\">\r\n        <h1 className=\"welcome-message\">Welcome to Your Budget Dashboard</h1>\r\n        <h2>Your Financial Journey Starts Here</h2>\r\n        <div className=\"home-button-container\">\r\n          <Link to=\"/login\" className=\"home-button\">\r\n            User Log In\r\n          </Link>\r\n          <Link to=\"/signup\" className=\"home-button\">\r\n            User Sign Up\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div className=\"image-container\">\r\n        <img\r\n          src={process.env.PUBLIC_URL + '/background_homepage.png'}\r\n          alt=\"Budget Website Banner\"\r\n          className=\"background-image\"   width=\"1000\" \r\n          height=\"700\" \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\r\n  const [token, setUserToken] = useState(null);\r\n  const [isTokenRefreshModalOpen, setIsTokenRefreshModalOpen] = useState(false);\r\n\r\n  const handleUserLogin = (token) => {\r\n    setUserToken(token);\r\n    setIsUserLoggedIn(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkUserTokenExpiry = async () => {\r\n      if (authService.checkUserTokenExpiry()) {\r\n        setIsTokenRefreshModalOpen(true);\r\n      }\r\n    };\r\n\r\n    checkUserTokenExpiry();\r\n  }, []);\r\n\r\n  const handleRefreshUserToken = async () => {\r\n    try {\r\n      await authService.refreshUserAccessToken();\r\n      setIsTokenRefreshModalOpen(false);\r\n    } catch (error) {\r\n      console.error('Error refreshing user user token:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <UserAuthProvider>\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/login\" element={<UserLogin onUserLogin={handleUserLogin} />} />\r\n          <Route path=\"/signup\" element={<UserRegistration />} />\r\n          <Route\r\n            path=\"/dashboard\"\r\n            element={isUserLoggedIn ? <UserDashboard token={token} /> : <Navigate to=\"/login\" />}\r\n          />\r\n          {isUserLoggedIn && (\r\n            <>\r\n              <Route path=\"/dashboard/budget-list\" element={<BudgetOverview />} />\r\n              <Route path=\"/dashboard/budget-chart\" element={<FinancialChart />} />\r\n              <Route path=\"/dashboard/configure-budget\" element={<AddBudgetCapacity />} />\r\n              <Route path=\"/dashboard/add-budget\" element={<CreateBudget token={token} />} />\r\n            </>\r\n          )}\r\n        </Routes>\r\n      </UserAuthProvider>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n};\r\nexport default App;","C:\\NBAD\\Y1\\src\\components\\Auth\\UserRegistration.js",[],[],"C:\\NBAD\\Y1\\src\\components\\Auth\\UserLogin.js",[],[],"C:\\NBAD\\Y1\\src\\components\\Dashboard\\UserDashboard.js",[],[],"C:\\NBAD\\Y1\\src\\components\\services\\authService.js",[],[],"C:\\NBAD\\Y1\\src\\config.js",[],[],"C:\\NBAD\\Y1\\src\\components\\Auth\\AuthenticationContext.js",[],[],"C:\\NBAD\\Y1\\src\\components\\Dashboard\\CreateBudget.js",[],[],"C:\\NBAD\\Y1\\src\\components\\Dashboard\\FinancialChart.js",["91","92"],[],"//FinancialChart.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport apiService from '../services/apiService';\r\nimport '../../styles/FinancialChart.css';\r\n\r\nconst BudgetChart = ({ token }) => {\r\n  const barChartCanvasRef = useRef(null);\r\n  const pieChartCanvasRef = useRef(null);\r\n  const lineChartCanvasRef = useRef(null);\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [budgetData, setBudgetData] = useState([]);\r\n  const [budgetCapacity, setBudgetCapacity] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAndCreateCharts = async () => {\r\n      try {\r\n        const budgetEndpoint = selectedMonth\r\n          ? `/budgets/getAllBudgets/${selectedMonth}`\r\n          : '/budgets/getAllBudgets';\r\n\r\n        const capacityEndpoint = selectedMonth\r\n          ? `/budgets/capacity/${selectedMonth}`\r\n          : '/budgets/capacity';\r\n\r\n        const [budgetResponse, capacityResponse] = await Promise.all([\r\n          apiService.get(budgetEndpoint, token, {\r\n            params: { month: parseInt(selectedMonth, 10) },\r\n          }),\r\n          apiService.get(capacityEndpoint, token),\r\n        ]);\r\n\r\n        const budgetData = budgetResponse.data || [];\r\n        const capacityData = capacityResponse.data || [];\r\n\r\n        setBudgetData(budgetData);\r\n        setBudgetCapacity(capacityData);\r\n        setLoading(false);\r\n\r\n        createBarChart();\r\n        pieChartCanvasRef();\r\n        createLineChart();\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching budget data: ', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDataAndCreateCharts();\r\n  }, [token, selectedMonth]);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      createBarChart();\r\n      createPieChart();\r\n      createLineChart();\r\n      \r\n    }\r\n  }, [loading, budgetData, budgetCapacity]);\r\n\r\n  const createLineChart = async () => {\r\n    const lineCanvas = lineChartCanvasRef.current;\r\n  \r\n    if (!lineCanvas) {\r\n      console.error('Line Canvas element not found');\r\n      return;\r\n    }\r\n  \r\n    const lineCtx = lineCanvas.getContext('2d');\r\n    if (!lineCtx) {\r\n      console.error('Unable to get 2D context for line canvas');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      if (lineCanvas.chart) {\r\n        lineCanvas.chart.destroy();\r\n      } \r\n      const cumulativeData = [];\r\n\r\n      for (let month = 1; month <= 12; month++) {\r\n        const budgetsResponse = await apiService.get(`/budgets/getAllBudgets/${month}`, token);\r\n        const capacityResponse = await apiService.get(`/budgets/capacity/${month}`, token);\r\n        const budgetData = budgetsResponse.data || [];\r\n        const capacityData = capacityResponse.data || [];\r\n  \r\n        let totalBudget = 0;\r\n        let totalCapacity = 0;\r\n  \r\n        for (const item of budgetData) {\r\n          totalBudget += Number(item.budgetnumber) || 0;\r\n        }\r\n  \r\n        for (const item of capacityData) {\r\n          totalCapacity += Number(item.budgetnumber) || 0;\r\n        }\r\n  \r\n        cumulativeData.push({\r\n          month: month,\r\n          totalBudget: totalBudget,\r\n          totalCapacity: totalCapacity,\r\n        });\r\n      }\r\n\r\n      const chartData = {\r\n        labels: cumulativeData.map(item => item.month),\r\n        datasets: [\r\n          {\r\n            label: 'Cumulative Actual Budget',\r\n            borderColor: '#ff6384',\r\n            data: cumulativeData.map(item => item.totalBudget),\r\n            fill: false,\r\n          },\r\n          {\r\n            label: 'Cumulative Budget',\r\n            borderColor: '#36a2eb',\r\n            data: cumulativeData.map(item => item.totalCapacity),\r\n            fill: false,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      lineCanvas.chart = new Chart(lineCtx, {\r\n        type: 'line',\r\n        data: chartData,\r\n        options: {\r\n          scales: {\r\n            x: {\r\n              type: 'category',\r\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              position: 'left',\r\n            },\r\n          },\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating line chart: ', error);\r\n    }\r\n  };\r\n\r\n  const createBarChart = () => {\r\n    const canvas = barChartCanvasRef.current;\r\n    if (!canvas) {\r\n      console.error('Bar Chart Canvas element not found');\r\n      return;\r\n    }\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n      console.error('Unable to get 2D context for Bar Chart canvas');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (canvas.chart) {\r\n        canvas.chart.destroy();\r\n      }\r\n\r\n      const combinedData = budgetData.map(dataItem => {\r\n        const matchingCapacity = budgetCapacity.find(capacityItem => capacityItem.budgetname === dataItem.budgetname);\r\n        return {\r\n          budgetName: dataItem.budgetname,\r\n          actualExpenditure: dataItem.budgetnumber,\r\n          budgetCapacity: matchingCapacity ? matchingCapacity.budgetnumber : null,\r\n        };\r\n      });\r\n\r\n      const chartData = {\r\n        labels: combinedData.map(item => item.budgetName),\r\n        datasets: [\r\n          {\r\n            label: 'Actual Expenditure',\r\n            backgroundColor: '#9966ff', \r\n            data: combinedData.map(item => item.actualExpenditure),\r\n          },\r\n          {\r\n            label: 'Budget',\r\n            backgroundColor: '#ffcc99', \r\n            data: combinedData.map(item => item.budgetCapacity),\r\n          },\r\n        ],\r\n      };\r\n\r\n      canvas.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: chartData,\r\n        options: {\r\n          scales: {\r\n            x: { stacked: true }, \r\n            y: { stacked: true }, \r\n          },\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating bar chart: ', error);\r\n    }\r\n  };\r\n\r\n  const createPieChart = () => {\r\n    const pieCanvas = pieChartCanvasRef.current;\r\n\r\n    if (!pieCanvas) {\r\n      console.error('Pie Canvas element not found');\r\n      return;\r\n    }\r\n\r\n    const pieCtx = pieCanvas.getContext('2d');\r\n    if (!pieCtx) {\r\n      console.error('Unable to get 2D context for pie canvas');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (pieCanvas.chart) {\r\n        pieCanvas.chart.destroy();\r\n      }\r\n\r\n      const combinedData = budgetData.map(dataItem => {\r\n        const matchingCapacity = budgetCapacity.find(capacityItem => capacityItem.budgetname === dataItem.budgetname);\r\n        return {\r\n          budgetname: dataItem.budgetname,\r\n          actualExpenditure: dataItem.budgetnumber,\r\n          budgetCapacity: matchingCapacity ? matchingCapacity.budgetnumber : null,\r\n        };\r\n      });\r\n\r\n      const pieData = combinedData.map((item, index) => {\r\n        const actualExpenditure = item.actualExpenditure || 0;\r\n        const budgetCapacity = item.budgetCapacity || 0;\r\n        const remainingBudget = budgetCapacity - actualExpenditure;\r\n\r\n        const backgroundColors = [\r\n          '#ff6384', '#36a2eb', '#ff9f40', '#4bc0c0', '#9966ff', '#ffcc66', '#6666ff', '#99ff66', '#ff6666', '#66ccff',\r\n          '#ffcc99', '#cc66ff', '#33cc33', '#6666cc', '#cc6666', '#99ccff', '#ff6666', '#66ccff', '#ffcc99', '#cc66ff'\r\n        ];\r\n\r\n        return {\r\n          label: item.budgetname,\r\n          data: [actualExpenditure, remainingBudget],\r\n          backgroundColor: backgroundColors[index % backgroundColors.length],\r\n        };\r\n      });\r\n\r\n      console.log('pieChartData:', pieData);\r\n\r\n      pieCanvas.chart = new Chart(pieCtx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: pieData.map(item => item.label),\r\n          datasets: [{\r\n            data: pieData.map(item => item.data[0]),\r\n            backgroundColor: pieData.map(item => item.backgroundColor),\r\n          }],\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating pie chart: ', error);\r\n    }\r\n  };\r\n\r\n  const handleMonthChange = (event) => {\r\n    setSelectedMonth(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"budget-chart\">\r\n      <h3>Various Types of Budget Charts</h3>\r\n      <div className=\"label-container\">\r\n        <select value={selectedMonth} onChange={handleMonthChange}>\r\n          <option value=\"\">All Months</option>\r\n          <option value=\"1\">January</option>\r\n          <option value=\"2\">February</option>\r\n          <option value=\"3\">March</option>\r\n          <option value=\"4\">April</option>\r\n          <option value=\"5\">May</option>\r\n          <option value=\"6\">June</option>\r\n          <option value=\"7\">July</option>\r\n          <option value=\"8\">August</option>\r\n          <option value=\"9\">September</option>\r\n          <option value=\"10\">October</option>\r\n          <option value=\"11\">November</option>\r\n          <option value=\"12\">December</option>\r\n        </select>\r\n      </div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div className=\"scrollable-container\">\r\n          <div className=\"charts-container\">\r\n            <div className=\"chart\">\r\n              <h3>Budget for the current period vs Cumulative budget</h3>\r\n              {budgetData.length > 0 && budgetCapacity.length > 0 && (\r\n                <canvas className=\"budget-canvas\" ref={barChartCanvasRef} width={800} height={800}></canvas>\r\n              )}\r\n              {budgetData.length === 0 && budgetCapacity.length > 0 && <p>No budget data available.</p>}\r\n            </div>\r\n            <div className=\"chart\">\r\n              <h3>Current budget allocation chart</h3>\r\n              {budgetData.length > 0 && budgetCapacity.length > 0 && (\r\n                <canvas className=\"budget-pie-canvas\" ref={pieChartCanvasRef} width={800} height={800}></canvas>\r\n              )}\r\n              {budgetData.length === 0 && budgetCapacity.length > 0 && <p>No budget data available.</p>}\r\n            </div>\r\n          </div>\r\n\r\n            <div className=\"chart\">\r\n              <h3>Budget for the current period. vs Cumulative budget allocation</h3>\r\n              {budgetData.length > 0 && budgetCapacity.length > 0 && (\r\n                <canvas className=\"budget-line-canvas\" ref={lineChartCanvasRef} width={400} height={400}></canvas>\r\n              )}\r\n              {budgetData.length === 0 && budgetCapacity.length > 0 && <p>No budget data available.</p>}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetChart;\r\n","C:\\NBAD\\Y1\\src\\components\\Dashboard\\BudgetOverview.js",["93"],[],"//BudgetOverview.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport apiService from '../services/apiService';\r\nimport '../../styles/BudgetOverview.css';\r\n\r\nconst BudgetOverview = ({ token }) => {\r\n  const [budgetData, setBudgetData] = useState([]);\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [capacityData, setCapacityData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBudgetData = async () => {\r\n      try {\r\n        const headers = {\r\n          Authorization: 'Bearer ' + token,\r\n        };\r\n\r\n        const budgetEndpoint = selectedMonth\r\n          ? `/budgets/getAllBudgets/${selectedMonth}`\r\n          : '/budgets/getAllBudgets';\r\n\r\n        const capacityEndpoint = selectedMonth\r\n          ? `/budgets/capacity/${selectedMonth}`\r\n          : '/budgets/capacity';\r\n\r\n        const capacityParams = selectedMonth\r\n          ? { params: { month: parseInt(selectedMonth, 10) } }\r\n          : {};\r\n\r\n        const [budgetResponse, capacityResponse] = await Promise.all([\r\n          apiService.get(budgetEndpoint, token, { params: { month: parseInt(selectedMonth, 10) } }),\r\n          apiService.get(capacityEndpoint, token, capacityParams),\r\n        ]);\r\n\r\n        setBudgetData(budgetResponse.data);\r\n        setCapacityData(capacityResponse.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching budget data', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBudgetData();\r\n  }, [token, selectedMonth]);\r\n\r\n  const handleMonthChange = (event) => {\r\n    setSelectedMonth(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"budget-list-container-wrapper\" style={{ marginTop: '120px', width: '80%' }}>\r\n    <div className=\"budget-list-container\">\r\n      <h2 className=\"list-header\">Comprehensive Budget Overview</h2>\r\n\r\n      <label>\r\n        Select Month:\r\n        <select className=\"select-dropdown\" value={selectedMonth} onChange={handleMonthChange}>\r\n          <option value=\"\">All Months</option>\r\n          <option value=\"1\">January</option>\r\n          <option value=\"2\">February</option>\r\n          <option value=\"3\">March</option>\r\n          <option value=\"4\">April</option>\r\n          <option value=\"5\">May</option>\r\n          <option value=\"6\">June</option>\r\n          <option value=\"7\">July</option>\r\n          <option value=\"8\">August</option>\r\n          <option value=\"9\">September</option>\r\n          <option value=\"10\">October</option>\r\n          <option value=\"11\">November</option>\r\n          <option value=\"12\">December</option>\r\n        </select>\r\n      </label>\r\n\r\n      {!loading ? (\r\n        budgetData && budgetData.length > 0 ? (\r\n          <div className=\"budget-table\">\r\n            <div className=\"table-row header\">\r\n              <div className=\"table-cell\">Budget Name</div>\r\n              <div className=\"table-cell\">Budget Amount</div>\r\n              <div className=\"table-cell\">Total Capacity</div>\r\n              <div className=\"table-cell\">Remaining Balance</div>\r\n            </div>\r\n            {budgetData.map((budget) => {\r\n              const capacityForBudget = capacityData.find(\r\n                (capacityItem) => capacityItem.budgetname === budget.budgetname\r\n              );\r\n\r\n              const budgetAmount = budget.budgetnumber || 0;\r\n              const capacityAmount = capacityForBudget ? capacityForBudget.budgetnumber || 0 : 0;\r\n\r\n              const remainingBalance = Math.max(0, capacityAmount - budgetAmount);\r\n\r\n              return (\r\n                <div className=\"table-row\" key={budget.id}>\r\n                  <div className=\"table-cell\">{budget.budgetname}</div>\r\n                  <div className=\"table-cell\">{budgetAmount}</div>\r\n                  <div className=\"table-cell\">{capacityAmount}</div>\r\n                  <div className={`table-cell remaining-balance`}>{remainingBalance}</div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <p className=\"no-data-message\">No budget data available.</p>\r\n        )\r\n      ) : (\r\n        <p className=\"loading-message\">Loading...</p>\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetOverview;\r\n","C:\\NBAD\\Y1\\src\\components\\services\\apiService.js",[],[],"C:\\NBAD\\Y1\\src\\components\\Dashboard\\BudgetCapacityManager.js",["94","95"],[],"import config from '../../config';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport apiService from '../services/apiService';\r\nimport '../../styles/BudgetCapacityManager.css';\r\n\r\nconst BASE_URL = config.apiUrl;\r\n\r\nconst BudgetCapacityManager = ({ onAddBudgetCapacity, username, token }) => {\r\n  const [budgetName, setBudgetName] = useState('');\r\n  const [budgetNumber, setBudgetNumber] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [addBudgetMessage, setAddBudgetMessage] = useState('');\r\n  const [capacityData, setCapacityData] = useState([]);\r\n\r\n  const handleAddBudgetCapacity = async () => {\r\n    try {\r\n      if (typeof onAddBudgetCapacity !== 'function') {\r\n        console.error('onAddBudgetCapacity is not a function');\r\n        return;\r\n      }\r\n\r\n      const data = { budgetName, budgetNumber, selectedMonth: parseInt(selectedMonth, 10) };\r\n      const response = await onAddBudgetCapacity(data);\r\n\r\n      if (response && response.success) {\r\n        setAddBudgetMessage(response.message);\r\n        NotificationManager.success(response.message, 'Success');\r\n        setBudgetName('');\r\n        setBudgetNumber('');\r\n        setSelectedMonth('');\r\n      } else {\r\n        console.error('Failed to add budget capacity:', response ? response.message : 'Unknown error');\r\n        setAddBudgetMessage(response ? response.message : 'Failed to add budget capacity');\r\n        NotificationManager.error(response ? response.message : 'Failed to add budget capacity', 'Error');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding budget capacity:', error.message);\r\n      setAddBudgetMessage('Error adding budget capacity');\r\n      NotificationManager.error('Error adding budget capacity', 'Error');\r\n    }\r\n  };\r\n\r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const capacityEndpoint = selectedMonth\r\n    ? `/budgets/capacity/${selectedMonth}`\r\n    : '/budgets/capacity';\r\n\r\n  useEffect(() => {\r\n    const fetchCapacityData = async () => {\r\n      try {\r\n        const response = await apiService.get(capacityEndpoint, token);\r\n        setCapacityData(response.data || []);\r\n      } catch (error) {\r\n        console.error('Error fetching capacity data:', error);\r\n      }\r\n    };\r\n\r\n    fetchCapacityData();\r\n  }, [capacityEndpoint, token]);\r\n\r\n  return (\r\n    <div className=\"add-budget-container\">\r\n      <h3 className=\"header\">Add the Budget </h3>\r\n      <label>\r\n        Select Month:\r\n        <select\r\n          className=\"select-dropdown\"\r\n          value={selectedMonth}\r\n          onChange={(e) => setSelectedMonth(e.target.value)}\r\n        >\r\n          <option value=\"\">Select Month</option>\r\n          <option value=\"1\">January</option>\r\n          <option value=\"2\">February</option>\r\n          <option value=\"3\">March</option>\r\n          <option value=\"4\">April</option>\r\n          <option value=\"5\">May</option>\r\n          <option value=\"6\">June</option>\r\n          <option value=\"7\">July</option>\r\n          <option value=\"8\">August</option>\r\n          <option value=\"9\">September</option>\r\n          <option value=\"10\">October</option>\r\n          <option value=\"11\">November</option>\r\n          <option value=\"12\">December</option>\r\n        </select>\r\n      </label>\r\n      <label>\r\n        Add Category:\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          value={budgetName}\r\n          onChange={(e) => setBudgetName(e.target.value)}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Category Value:\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          value={budgetNumber}\r\n          onChange={(e) => setBudgetNumber(e.target.value)}\r\n        />\r\n      </label>\r\n      <br />\r\n      <button className=\"add-budget-button\" onClick={handleAddBudgetCapacity}>\r\n        Add Budget Category\r\n      </button>\r\n\r\n      <h3 className=\"header\">Capacity Data</h3>\r\n      {capacityData.length > 0 ? (\r\n        <table className=\"capacity-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Category</th>\r\n              <th>Category Number</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {capacityData.map((item) => (\r\n              <tr key={item.budgetname}>\r\n                <td>{item.budgetname}</td>\r\n                <td>{item.budgetnumber}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <p>No capacity added.</p>\r\n      )}\r\n\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onRequestClose={closeModal}\r\n        contentLabel=\"Add Budget Message\"\r\n        className=\"modal\"\r\n        overlayClassName=\"overlay\"\r\n      >\r\n        <h2>{addBudgetMessage}</h2>\r\n        <button onClick={closeModal}>Close</button>\r\n      </Modal>\r\n\r\n      {/* Notification container */}\r\n      <NotificationContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetCapacityManager;\r\n","C:\\NBAD\\Y1\\src\\components\\Footer\\Footer.js",[],[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":24},{"ruleId":"108","severity":1,"message":"112","line":50,"column":10,"nodeType":"110","messageId":"111","endLine":50,"endColumn":33},{"ruleId":"108","severity":1,"message":"113","line":67,"column":9,"nodeType":"110","messageId":"111","endLine":67,"endColumn":31},{"ruleId":"114","severity":1,"message":"115","line":53,"column":6,"nodeType":"116","endLine":53,"endColumn":28,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":62,"column":6,"nodeType":"116","endLine":62,"endColumn":43,"suggestions":"119"},{"ruleId":"108","severity":1,"message":"120","line":15,"column":15,"nodeType":"110","messageId":"111","endLine":15,"endColumn":22},{"ruleId":"108","severity":1,"message":"121","line":9,"column":7,"nodeType":"110","messageId":"111","endLine":9,"endColumn":15},{"ruleId":"108","severity":1,"message":"122","line":47,"column":9,"nodeType":"110","messageId":"111","endLine":47,"endColumn":18},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["123"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'ToastContainer' is defined but never used.","Identifier","unusedVar","'isTokenRefreshModalOpen' is assigned a value but never used.","'handleRefreshUserToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createBarChart' and 'createLineChart'. Either include them or remove the dependency array.","ArrayExpression",["124"],"React Hook useEffect has missing dependencies: 'createBarChart', 'createLineChart', and 'createPieChart'. Either include them or remove the dependency array.",["125"],"'headers' is assigned a value but never used.","'BASE_URL' is assigned a value but never used.","'openModal' is assigned a value but never used.","no-object-constructor",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [token, selectedMonth, createBarChart, createLineChart]",{"range":"130","text":"131"},"Update the dependencies array to be: [loading, budgetData, budgetCapacity, createBarChart, createPieChart, createLineChart]",{"range":"132","text":"133"},[1727,1749],"[token, selectedMonth, createBarChart, createLineChart]",[1893,1930],"[loading, budgetData, budgetCapacity, createBarChart, createPieChart, createLineChart]"]